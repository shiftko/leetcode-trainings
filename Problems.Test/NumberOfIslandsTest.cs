namespace Problems.Test;

public class NumberOfIslandsTest
{
    private readonly List<(char[][] Input, int Output)> _testData = new()
    {
        // (Input: new[]
        // {
        //     new[] { '1', '1', '1', '1', '0' },
        //     new[] { '1', '1', '0', '1', '0' },
        //     new[] { '1', '1', '0', '0', '0' },
        //     new[] { '1', '1', '1', '1', '0' },
        //     new[] { '0', '0', '0', '0', '0' },
        // }, Output: 1),
        // (Input: new[]
        // {
        //     new[] { '1', '1', '0', '0', '0' },
        //     new[] { '1', '1', '0', '0', '0' },
        //     new[] { '0', '0', '1', '0', '0' },
        //     new[] { '0', '0', '0', '1', '1' },
        // }, Output: 3),
        // (Input: new[]
        // {
        //     new[] { '1', '0', '1' },
        //     new[] { '0', '1', '0' },
        //     new[] { '1', '0', '1' },
        // }, Output: 5),
        // (Input: new[]
        // {
        //     new[] { '0', '1', '0' },
        //     new[] { '1', '0', '1' },
        //     new[] { '0', '1', '0' },
        // }, Output: 4),
        // (Input: new[]
        // {
        //     new[] { '1', '1', '0' },
        //     new[] { '1', '1', '0' },
        //     new[] { '0', '0', '0' },
        // }, Output: 1),
        // (Input: new[]
        // {
        //     new[] { '1', '1', '1' },
        //     new[] { '1', '0', '1' },
        //     new[] { '1', '1', '1' },
        // }, Output: 1),
        // (Input: new[]
        // {
        //     new[] { '1', '1', '1' },
        //     new[] { '0', '1', '0' },
        //     new[] { '1', '1', '1' },
        // }, Output: 1),

        (Input: new[]
        {
            new[] { '1', '1', '1', '1', '1', '0', '1', '1', '1', '1' },
            new[] { '1', '0', '1', '0', '1', '1', '1', '1', '1', '1' },
            new[] { '0', '1', '1', '1', '0', '1', '1', '1', '1', '1' },
            new[] { '1', '1', '0', '1', '1', '0', '0', '0', '0', '1' },
            new[] { '1', '0', '1', '0', '1', '0', '0', '1', '0', '1' },
            new[] { '1', '0', '0', '1', '1', '1', '0', '1', '0', '0' },
            new[] { '0', '0', '1', '0', '0', '1', '1', '1', '1', '0' },
            new[] { '1', '0', '1', '1', '1', '0', '0', '1', '1', '1' },
            new[] { '1', '1', '1', '1', '1', '1', '1', '1', '0', '1' },
            new[] { '1', '0', '1', '1', '1', '1', '1', '1', '1', '0' }
        }, Output: 2)
    };

    [Fact]
    public void NumIslandsTest()
    {
        foreach (var (input, output) in _testData)
        {
            Assert.Equal(output, NumberOfIslands.GetNumIslands(input));
        }
    }
}